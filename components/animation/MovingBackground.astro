---
// src/components/MovingBackground.astro
---
<div class="background-wrapper">
  <canvas id="moving-bg"></canvas>
</div>

<style>
  .background-wrapper {
    position: relative;
    width: 100%;
    height: 400px; /* anpassbar */
    overflow: hidden;
    background-color: #0d0d0d; /* dunkler Grund */
  }

  canvas#moving-bg {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    display: block;
  }
</style>

<script is:client>
  const canvas = document.getElementById("moving-bg");
  const ctx = canvas.getContext("2d");

  function resize() {
    canvas.width = canvas.offsetWidth;
    canvas.height = canvas.offsetHeight;
  }

  window.addEventListener("resize", resize);
  resize();

  // einfache Noise-Ã¤hnliche Animation mit Kreisen
  const particles = Array.from({ length: 40 }, () => ({
    x: Math.random() * canvas.width,
    y: Math.random() * canvas.height,
    r: 40 + Math.random() * 40,
    dx: -0.5 + Math.random(),
    dy: -0.5 + Math.random(),
  }));

  function animate() {
    ctx.clearRect(0, 0, canvas.width, canvas.height);

    for (const p of particles) {
      p.x += p.dx;
      p.y += p.dy;

      if (p.x < 0 || p.x > canvas.width) p.dx *= -1;
      if (p.y < 0 || p.y > canvas.height) p.dy *= -1;

      const gradient = ctx.createRadialGradient(p.x, p.y, 0, p.x, p.y, p.r);
      gradient.addColorStop(0, "rgba(0, 255, 128, 0.25)");
      gradient.addColorStop(1, "rgba(0, 0, 0, 0)");

      ctx.fillStyle = gradient;
      ctx.beginPath();
      ctx.arc(p.x, p.y, p.r, 0, Math.PI * 2);
      ctx.fill();
    }

    requestAnimationFrame(animate);
  }

  animate();
</script> 