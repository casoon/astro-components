---
interface Props {
  logoUrl?: string;
  overlayColor?: string;
  gridColor?: string;
  backgroundColor?: string;
  glowColor?: string;
  opacity?: number;
}

const {
  logoUrl = "/logo.svg",
  overlayColor = "rgba(255,255,255,0.03)",
  gridColor = "rgba(255,255,255,0.05)",
  backgroundColor = "rgba(0,0,0,0.4)",
  glowColor = "rgba(255,255,255,0.2)",
  opacity = 0.6
} = Astro.props;
---

<div class="grid-overlay">
  <div class="logo-container">
    <img src={logoUrl} class="logo" alt="Logo">
  </div>
  <svg class="grid-svg" viewBox="0 0 1920 1080" preserveAspectRatio="none">
    <defs>
      <filter id="glow" x="-50%" y="-50%" width="200%" height="200%">
        <feGaussianBlur in="SourceGraphic" stdDeviation="10" result="blur" />
      </filter>
      <linearGradient id="radial-fade" x1="50%" y1="0%" x2="50%" y2="100%">
        <stop offset="0%" stop-color="white" stop-opacity="0" />
        <stop offset="20%" stop-color="white" stop-opacity="0.3" />
        <stop offset="50%" stop-color="white" stop-opacity="1" />
        <stop offset="80%" stop-color="white" stop-opacity="0.3" />
        <stop offset="100%" stop-color="white" stop-opacity="0" />
      </linearGradient>
      <mask id="mask-radial">
        <rect width="100%" height="100%" fill="url(#radial-fade)" />
      </mask>
    </defs>
  
    <!-- Hintergrundraster -->
    <rect class="grid-backdrop" width="100%" height="100%" fill={backgroundColor} />
    
    <!-- Vertikale Linien -->
    <g class="grid-lines-vertical">
      <rect class="radial-mask" width="100%" height="100%" mask="url(#mask-radial)" />
    </g>
    
    <!-- Horizontale Linien -->
    <g class="grid-lines-horizontal">
      <rect class="radial-mask" width="100%" height="100%" mask="url(#mask-radial)" />
    </g>
  </svg>
</div>

<script is:inline src="https://cdnjs.cloudflare.com/ajax/libs/gsap/3.12.5/gsap.min.js"></script>
<script define:vars={{ overlayColor, gridColor, glowColor, opacity }}>
  document.addEventListener('DOMContentLoaded', () => {
    // @ts-ignore - GSAP wird extern geladen
    if (typeof gsap !== 'undefined') {
      // SVG Grid-Overlay erstellen und animieren
      const svgGrid = document.querySelector('.grid-svg');
      const gridLinesVertical = document.querySelector('.grid-lines-vertical');
      const gridLinesHorizontal = document.querySelector('.grid-lines-horizontal');
      const gridBackdrop = document.querySelector('.grid-backdrop');
      const logo = document.querySelector('.logo');
      
      if (!svgGrid || !gridLinesVertical || !gridLinesHorizontal || !gridBackdrop || !logo) {
        console.error('Einige erforderliche Elemente wurden nicht gefunden.');
        return;
      }

      // Vertikale Linien erzeugen
      for (let i = 0; i <= 23; i++) {
        const x = (i / 23) * 100 + '%';
        const line = document.createElementNS('http://www.w3.org/2000/svg', 'line');
        line.setAttribute('x1', x);
        line.setAttribute('y1', '0');
        line.setAttribute('x2', x);
        line.setAttribute('y2', '100%');
        line.setAttribute('stroke', gridColor);
        line.setAttribute('stroke-width', '1');
        line.setAttribute('vector-effect', 'non-scaling-stroke');
        gridLinesVertical.appendChild(line);
      }

      // Horizontale Linien erzeugen
      for (let i = 0; i <= 13; i++) {
        const y = (i / 13) * 100 + '%';
        const line = document.createElementNS('http://www.w3.org/2000/svg', 'line');
        line.setAttribute('x1', '0');
        line.setAttribute('y1', y);
        line.setAttribute('x2', '100%');
        line.setAttribute('y2', y);
        line.setAttribute('stroke', gridColor);
        line.setAttribute('stroke-width', '1');
        line.setAttribute('vector-effect', 'non-scaling-stroke');
        gridLinesHorizontal.appendChild(line);
      }

      // Overlay animieren
      // @ts-ignore
      const tl = gsap.timeline({ 
        defaults: {
          ease: 'power2.inOut'
        }
      });

      // Initial alle Linien transparent machen
      gsap.set([gridLinesVertical.querySelectorAll('line'), gridLinesHorizontal.querySelectorAll('line')], { 
        opacity: 0, 
        strokeWidth: 0 
      });
      gsap.set(gridBackdrop, { opacity: 0 });
      gsap.set(logo, { scale: 0.5, opacity: 0 });

      // Hintergrund einblenden
      tl.to(gridBackdrop, { 
        opacity: opacity, 
        duration: 1.5 
      }, 0);

      // Logo einblenden
      tl.to(logo, { 
        scale: 1, 
        opacity: 1, 
        duration: 2, 
        ease: 'elastic.out(1, 0.5)' 
      }, 0.5);

      // Vertikale Linien von der Mitte nach außen animieren
      const verticalLines = gridLinesVertical.querySelectorAll('line');
      const middleVerticalIndex = Math.floor(verticalLines.length / 2);
      
      // Mittlere Linie zuerst
      tl.to(verticalLines[middleVerticalIndex], {
        opacity: 1, 
        strokeWidth: 1, 
        duration: 0.5,
        stroke: glowColor,
        filter: 'url(#glow)'
      }, 2);
      
      // Dann nach außen animieren
      for (let i = 1; i <= middleVerticalIndex; i++) {
        const delay = 2 + (i * 0.02);
        tl.to([verticalLines[middleVerticalIndex - i], verticalLines[middleVerticalIndex + i]], {
          opacity: 1, 
          strokeWidth: 1, 
          duration: 0.5,
          stroke: overlayColor,
          stagger: 0.05
        }, delay);
      }

      // Horizontale Linien von der Mitte nach außen animieren
      const horizontalLines = gridLinesHorizontal.querySelectorAll('line');
      const middleHorizontalIndex = Math.floor(horizontalLines.length / 2);
      
      // Mittlere Linie zuerst
      tl.to(horizontalLines[middleHorizontalIndex], {
        opacity: 1, 
        strokeWidth: 1, 
        duration: 0.5,
        stroke: glowColor,
        filter: 'url(#glow)'
      }, 2);
      
      // Dann nach außen animieren
      for (let i = 1; i <= middleHorizontalIndex; i++) {
        const delay = 2 + (i * 0.02);
        tl.to([horizontalLines[middleHorizontalIndex - i], horizontalLines[middleHorizontalIndex + i]], {
          opacity: 1, 
          strokeWidth: 1, 
          duration: 0.5,
          stroke: overlayColor,
          stagger: 0.05
        }, delay);
      }
    }
  });
</script>

<style define:vars={{ backgroundColor }}>
  .grid-overlay {
    width: 100vw;
    height: 100vh;
    position: absolute;
    top: 0;
    left: 0;
    z-index: 995;
    overflow: hidden;
    pointer-events: none;
  }

  .grid-svg {
    width: 100%;
    height: 100%;
    position: absolute;
    top: 0;
    left: 0;
    pointer-events: none;
  }

  .grid-backdrop {
    transition: opacity 0.5s ease;
  }

  .radial-mask {
    fill: none;
  }

  .logo-container {
    position: fixed;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    z-index: 996;
    width: 150px;
    height: 150px;
    display: flex;
    justify-content: center;
    align-items: center;
  }

  .logo {
    max-width: 100%;
    max-height: 100%;
    opacity: 0;
    transform: scale(0.5);
  }
</style> 